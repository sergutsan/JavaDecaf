/* JavaDecaf grammar, modified from Java grammar in JavaCC examples.
* The below copyright statement is retained by request.
*/

/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */


options {
  MULTI = true; //Nodes have their own implementations of SimpleNode
  NODE_DEFAULT_VOID = true; //Do not create node class for every nonterminal
  JAVA_UNICODE_ESCAPE = true; //process unicode escapes before sending to tokenmgr
  ERROR_REPORTING = true; //enable parse exceptions
  NODE_USES_PARSER = true; //pass parser object into node constructors
  DEBUG_PARSER = true; //enable debugging trace
  STATIC = false; //Improves performance - only one parser at a time
  NODE_PACKAGE = "ast"; //package name of node files
  OUTPUT_DIRECTORY = "../main/java/parser"; //where the JavaCC files should be generated
  JJTREE_OUTPUT_DIRECTORY = "../main/java/ast"; //Where the JJTree files should be generated
}

/*
* Code for automatically generated JDCParser class
*/
PARSER_BEGIN(JDCParser)
package parser;
import java.io.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

public class JDCParser {
    private List<String> warningList = new ArrayList<String>();
    private List<String> errorList = new ArrayList<String>();
    private String className;

/* Constructor with className calls normal constructor with encoding. */
    public JDCParser(InputStream fis, String className, String encoding){
        this(fis, encoding);
        this.className = className;
        this.disable_tracing(); //Default - no debugging. This is re-enabled in main class if user requests

    }

    /**
    * Get the name of the class
    */
    public String getClassName() {
        return className;
        }


    /**
     * Test whether a given identifier is a legal method name: must begin with lower case letter
     * and must not be equal to any of the methods in java.lang.Object or to any of the methods
     * defined by Java Decaf. 
     * 
     * @throw MethodNameParseException if the name starts with a capital letter
     * @throw MethodNameParseTakenException if the name is used by methods of java.lang.Object
     * @throw MethodNameParseTakenDecafException if the name is used by Java Decaf
     *
     * @param t the token of the identifier in question
     */
    public void checkMethodName(Token t) throws MethodNameParseException {
        if (Character.isUpperCase(t.image.charAt(0))){
           errorList.add((new MethodNameParseException(t)).getMessage());
           return;
        } 

	  String[] methodsInJavaLangObject = {"clone", "equals", "finalize", "getClass", "hashCode", "notify", "notifyAll", "toString", "wait"};
	  List<String> reservedMethodNames = Arrays.asList(methodsInJavaLangObject);
	  if (reservedMethodNames.contains(t.image)) {
		errorList.add((new MethodNameTakenException(t)).getMessage());
		return;
	  }

	  String[] javaDecafMethods = {"print", "println", "readLine", "readInt", "readDouble"};
	  reservedMethodNames = Arrays.asList(javaDecafMethods);
	  if (reservedMethodNames.contains(t.image)) {
		errorList.add((new MethodNameTakenDecafException(t)).getMessage());
		return;
	  }
    }

    /**
     * Test whether a given identifier is a legal class name: must begin with upper case letter and
     * must be different from the name of the containing script. 
     * @throw ClassNameParseException if the name does not start with a capital letter
     * @throw ClassNameSameAsScriptException if the name is the same as the containing script
     * @param t the token of the identifier in question
     */
    public void checkClassName(Token t) throws ClassNameParseException {
	  if (Character.isLowerCase(t.image.charAt(0))){
		errorList.add((new ClassNameParseException(t)).getMessage());
		return;
	  }
	  if (this.getClassName().equals(t.image)) {
		errorList.add((new ClassNameSameAsScriptException(t)).getMessage());
		return;
	  }
    }

    /**
     * Test whether a given identifier is a legal variable name: must begin with lower case letter
     * unless the variable is in all caps (constant name)
     * Throw ParseException if not legal.
     * @param t - the token of the identifier in question
     */
    public void checkVariableName(Token t) throws VariableNameParseException {
         char firstChar = t.image.charAt(0);
         if (!Character.isLetter(firstChar)) {
               errorList.add((new VariableNameParseException(t)).getMessage());
         } else if (Character.isUpperCase(firstChar)) {
               // maybe a constant?
               for (char c: t.image.toCharArray()) {
                   if (Character.isLowerCase(c)) {
                         // alas, not a constant; just bad capitalisation
                         errorList.add((new VariableNameParseException(t)).getMessage());
                         break;
                   }
               }
         }
    }

    /**
     * Add a warning to the internal warning list to be printed at the end.
     * @param warning - the warning to add
     */
     protected void addWarning(String warning) {
        warningList.add(warning);
        }

     /**
     * Get the warning list
     * @return the list of warnings
     */
     protected List<String> getWarningList() {
        return warningList;
     }

     /**
     * see if the warning list contains any warnings
     * @return true if there are warnings, false otherwise
     */
     protected boolean hasWarnings(){
        return warningList.size() > 0;
        }

     /**
     * Get the error list
     * @return the list of errors
     */
     protected List<String> getErrorList() {
        return errorList;
     }

     /**
     * See if the error list contains any errors
     * @return true if there are errors, false otherwise
     */
     protected boolean hasErrors() {
        return errorList.size() > 0;
     }


}

PARSER_END(JDCParser)

/* Begin code NOT modified by SK */

SPECIAL_TOKEN : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : /* RESERVED WORDS AND LITERALS */
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}
/* End code NOT modified by SK */

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
/*
 * Edited by Sophie Koonin
 */
ASTCompilationUnit CompilationUnit() #CompilationUnit :
{}
{
    try {
        {
          jjtThis.setFirstToken(getToken(1));
        }
  [ PackageDeclaration() ]
  ( ImportDeclaration() )*
  ( LOOKAHEAD(3) //avoid choice conflict - SK
  ( TypeDeclaration() )+
  |
  DecafClass()
  )
  <EOF>
  } catch (ParseException ex) {
      addErrorMessage(ex); //Add the message of the exception to the internal error list
      recoverFromError(SEMICOLON); //Skip to next semicolon and continue parsing

  }
    {
      //((SimpleNode)jjtree.rootNode()).dump(">"); //Dump nodes to console
      return jjtThis;
    }
}

void PackageDeclaration() :
{Token t;}
{ ({
    t = getToken(1);
    }
  "package" Name() ";"
  {
    setFirstLastToken(jjtThis, t, getToken(0));
    })#PackageDeclaration
}

void ImportDeclaration() :
{Token t;}
{ ({
    t = getToken(1);
    }
  "import" Name() [ "." "*" ] ";"
  {
      setFirstLastToken(jjtThis, t, getToken(0));
      })#ImportDeclaration
}

void TypeDeclaration() :
{ }
{

  LOOKAHEAD( ( "abstract" | "final" | "public" )* "class" )
  ClassDeclaration()
|
  InterfaceDeclaration()
|
  ";"
}



/*
 * Declaration syntax follows.
 */

void ClassDeclaration() :
{Token t;}
{
  ({
    t = getToken(1);
  }
  ( "abstract" | "final" | "public" )*
  UnmodifiedClassDeclaration()
  {
    setFirstLastToken(jjtThis, t, getToken(0));
  })#ClassDeclaration

}

void UnmodifiedClassDeclaration() :
{}
{
/* Checks the validity of the class name*/
  "class" <IDENTIFIER> { checkClassName(getToken(0)); } [ "extends" Name() ] [ "implements" NameList() ]
  ClassBody()
}

void ClassBody() :
{}
{
 "{" ( ClassBodyDeclaration() )* "}"
}

void NestedClassDeclaration() :
{Token t;}
{
  ({
  t = getToken(1);
  }
  ( "static" | "abstract" | "final" | "public" | "protected" | "private" )*
  UnmodifiedClassDeclaration()
  {
    setFirstLastToken(jjtThis, t, getToken(0));
    })#NestedClassDeclaration
}

void ClassBodyDeclaration() :
{}
{
  LOOKAHEAD(2)
  Initializer()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" )* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" )* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( [ "public" | "protected" | "private" ] Name() "(" )
  ConstructorDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
}

// This production is to determine lookahead only.
void MethodDeclarationLookahead() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" )*
  ResultType() <IDENTIFIER> { checkMethodName(getToken(0)); //test the method name
   } "("
}

void InterfaceDeclaration() :
{Token t;}
{ ({
    t = getToken(1);
    }
  ( "abstract" | "public" )*
  UnmodifiedInterfaceDeclaration()
  {
    setFirstLastToken(jjtThis, t, getToken(0));
    })#InterfaceDeclaration
}

void NestedInterfaceDeclaration() :
{}
{
  ( "static" | "abstract" | "final" | "public" | "protected" | "private" )*
  UnmodifiedInterfaceDeclaration()
}

void UnmodifiedInterfaceDeclaration() :
{}
{
  "interface" <IDENTIFIER> [ "extends" NameList() ]
  "{" ( InterfaceMemberDeclaration() )* "}"
}

void InterfaceMemberDeclaration() :
{}
{
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" )* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" )* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
}

void FieldDeclaration() :
{Token t;}
{
  ({
    t = getToken(1);
    }
  ( "public" | "protected" | "private" | "static" | "final" | "transient" | "volatile" )*
  Type() VariableDeclarator() ( "," VariableDeclarator() )* ";"
  {
  setFirstLastToken(jjtThis, t, getToken(0));
  })#FieldDeclaration
}

void VariableDeclarator() :
{}
{
  VariableDeclaratorId() [ "=" VariableInitializer() ]
}

void VariableDeclaratorId() :
{}
{
/* Check validity of variable name*/
  <IDENTIFIER> { checkVariableName(getToken(0)); } ( "[" "]" )*
}

void VariableInitializer() :
{}
{
  ArrayInitializer()
|
  Expression()
}

void ArrayInitializer() :
{Token t;}
{
  ({
  t = getToken(1);
  }
  "{" [ VariableInitializer() ( LOOKAHEAD(2) (",")#Comma VariableInitializer() )* ] [ "," ] "}"
  { setFirstLastToken(jjtThis, t, getToken(0));})#ArrayInitialiser
}

void MethodDeclaration() :
{Token t;}
{
  (
  ({
    t = getToken(1);
    }( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" )*
  ResultType() MethodDeclarator() [ "throws" NameList() ]

  (
    Block()
  |
   ";"
  ){ setFirstLastToken(jjtThis, t, getToken(0));
       }
       )#MethodDeclaration)
}

void MethodDeclarator() :
{}
{
  <IDENTIFIER> {
  checkMethodName(getToken(0)); //Check validity of the method name
                  }
  FormalParameters() ( "[" "]" )*
}

void FormalParameters() :
{}
{
  "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"
}

void FormalParameter() :
{}
{
  [ "final" ] Type() VariableDeclaratorId()
}

void ConstructorDeclaration() :
{Token t;}
{
  ({
    t = getToken(1);
    }
  [ "public" | "protected" | "private" ]
  <IDENTIFIER> FormalParameters() [ "throws" NameList() ]
  "{"
    [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ]
    ( BlockStatement() )*
  "}"
  {
   setFirstLastToken(jjtThis, t, getToken(0));
  })#ConstructorDeclaration
}

void ExplicitConstructorInvocation() :
{}
{
  LOOKAHEAD("this" Arguments() ";")
  "this" Arguments() ";"
|
  [ LOOKAHEAD(2) PrimaryExpression() "." ] "super" Arguments() ";"
}

void Initializer() :
{}
{
  [ "static" ] Block()
}


/*
 * Type, name and expression syntax follows.
 */

void Type() :
{}
{
  ( PrimitiveType() | Name() ) ( "[" "]" )*
}

void PrimitiveType() :
{}
{
  "boolean"
|
  "char"
|
  "byte"
|
  "short"
|
  "int"
|
  "long"
|
  "float"
|
  "double"
}

void ResultType() :
{}
{
  "void"
|
  Type()
}

void Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{}
{
  <IDENTIFIER>

  ( LOOKAHEAD(2) "." <IDENTIFIER>
  )*

}

void NameList() :
{}
{
  Name()
  ( "," Name()
  )*
}


/*
 * Expression syntax follows.
 */

void Expression() :
{}
{

     ( LOOKAHEAD( PrimaryExpression() AssignmentOperator())
      Assignment()
      |
      ConditionalExpression())

}

void Assignment() :
{Token t;}
{
  ({
  t = getToken(1);
  }
  PrimaryExpression() AssignmentOperator() Expression()
  {
    setFirstLastToken(jjtThis, t, getToken(0));
    })#Assignment
}

void AssignmentOperator() :
{Token t;}
{ ({
    t = getToken(1);
    }
  ("="| "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=")
  {
    setFirstLastToken(jjtThis, t, getToken(1));
    })#AssignmentOperator

}

void ConditionalExpression() :
{Token t;}
{
  ({
   t = getToken(1);
  }
  ConditionalOrExpression() [("?")#TernaryQuestionMark Expression() (":")#TernaryColon ConditionalExpression() ]
  {
    setFirstLastToken(jjtThis, t, getToken(1));
    })#ConditionalExpression
}

void ConditionalOrExpression() :
{Token t = null;}
{
  ConditionalAndExpression() (
  (LOOKAHEAD(2) {
     t = getToken(1);
    }"||"

    ConditionalAndExpression() )* {
                                        setFirstLastToken(jjtThis, t, getToken(1));
                                      })#ConditionalOr
}

void ConditionalAndExpression() :
{Token t = null;}
{
  InclusiveOrExpression()
  ({
    t = getToken(1);
    }
  ( LOOKAHEAD(2) "&&"

   ConditionalOrExpression() )* {
                                   setFirstLastToken(jjtThis, t, getToken(1));
                                   })#ConditionalAnd
}

void InclusiveOrExpression() :
{}
{
  ExclusiveOrExpression() ( "|" ExclusiveOrExpression() )*
}

void ExclusiveOrExpression() :
{}
{
  AndExpression() ( "^" AndExpression() )*
}

void AndExpression() :
{}
{
  EqualityExpression() ( "&" EqualityExpression() )*
}

void EqualityExpression() :
{Token t;}
{
  InstanceOfExpression() ( ({t = getToken(1);} ("==" | "!=" ) {setFirstLastToken(jjtThis, t, getToken(1));})#EqualityOperator InstanceOfExpression() )*
}

void InstanceOfExpression() :
{}
{
  RelationalExpression() [ "instanceof" Type() ]
}

void RelationalExpression() :
{Token t;}
{
  ShiftExpression() ( ({
    t = getToken(1);
    }
    (("<" | ">" | "<=" | ">=")
    { setFirstLastToken(jjtThis, t, getToken(1));}))#RelationalOperator ShiftExpression() )*
}

void ShiftExpression() :
{}
{
  AdditiveExpression() ( ( "<<" | ">>" | ">>>" ) AdditiveExpression() )*
}

void AdditiveExpression() :
{Token t;}
{
  MultiplicativeExpression() ( ({ t = getToken(1); } ( "+" | "-" ){ setFirstLastToken(jjtThis, t, getToken(1));})#AdditiveOperator MultiplicativeExpression() )*
}

void MultiplicativeExpression() :
{Token t;}
{
  UnaryExpression() ( ({ t = getToken(1); } ( "*" | "/" | "%" ) { setFirstLastToken(jjtThis, t, getToken(1));})#MultiplicativeOperator UnaryExpression() )*
}

void UnaryExpression() :
{}
{
  ( "+" ) UnaryExpression()
|
  MinusUnaryExpression()
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()
}

void MinusUnaryExpression() :
{Token t;}
{
  ({ t = getToken(1); } ( "-" ) { setFirstLastToken(jjtThis, t, getToken(1)); })#MinusSign UnaryExpression()
}

void PreIncrementExpression() :
{}
{
  "++" PrimaryExpression()
}

void PreDecrementExpression() :
{}
{
  "--" PrimaryExpression()
}

void UnaryExpressionNotPlusMinus() :
{}
{
  ( "~" | "!" ) UnaryExpression()
|
  LOOKAHEAD( CastLookahead() )
  CastExpression()
|
  PostfixExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Name() "[")
  "(" Name() "[" "]"
|
  "(" Name() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}

void PostfixExpression() :
{Token t;}
{
  PrimaryExpression() [ ({t = getToken(1); } ("++" | "--") { setFirstLastToken(jjtThis, t, getToken(1));})#IncrementDecrement ]
}

void CastExpression() :
{}
{
  LOOKAHEAD("(" PrimitiveType())
  "(" Type() ")" UnaryExpression()
|
  LOOKAHEAD("(" Name())
  "(" Type() ")" UnaryExpressionNotPlusMinus()
}

void PrimaryExpression() :
{Token t;}
{ ({
    t = getToken(1);
    }
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
  {
    setFirstLastToken(jjtThis, t, getToken(1));
    })#PrimaryExpression
}

void PrimaryPrefix() :
{Token t;}
{
  Literal()
|
  Name()
|
  "this"
|
  "super" "." <IDENTIFIER>
|
  ({t = getToken(1);} "(" Expression() ")" {setFirstLastToken(jjtThis, t, getToken(0));})#ParensExpression
|
  AllocationExpression()
}

void PrimarySuffix() :
{Token t;}
{
  LOOKAHEAD(2)
  "." "this"
|
  LOOKAHEAD(2)
  "." "class"
|
  LOOKAHEAD(2)
  "." AllocationExpression()
|
  ({ t = getToken(1);}"[" Expression() "]"{
                                              setFirstLastToken(jjtThis, t, getToken(0));
                                              })#PrimarySuffix
|
  ({t = getToken(1);}"." <IDENTIFIER> {
                                        setFirstLastToken(jjtThis, t, getToken(0));})#PrimarySuffixIdentifier
|
  Arguments()

}

void Literal() :
{}
{
  <INTEGER_LITERAL>
|
  <FLOATING_POINT_LITERAL>
|
  <CHARACTER_LITERAL>
|
  <STRING_LITERAL>
|
  BooleanLiteral()
|
  NullLiteral()
}

void BooleanLiteral() :
{}
{
  "true"
|
  "false"
}

void NullLiteral() :
{}
{
  "null"
}

void Arguments() :
{Token t;}
{
  ({
    t = getToken(1);
    }
  "(" [ ArgumentList() ] ")"
  {
    setFirstLastToken(jjtThis, t, getToken(0));
    })#Arguments
}

void ArgumentList() :
{}
{
  Expression() ( (",")#Comma Expression() )*
}

void AllocationExpression() :
{}
{
  LOOKAHEAD(2)
  "new" PrimitiveType() ArrayDimensions() [ ArrayInitializer() ]
|
  "new" Name()
    (
      ArrayDimensions() [ ArrayInitializer() ]
    |
      Arguments() [ ClassBody() ]
    )
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimensions() :
{Token t;}
{
  ( LOOKAHEAD(2) ({
                    t = getToken(1);
                    }
    "["
    {
        setFirstLastToken(jjtThis, t, getToken(0));
    })#ArrayLBracket

        Expression()

    ({
        t = getToken(1);
    }
    "]"
    {
        setFirstLastToken(jjtThis, t, getToken(0));
        })#ArrayRBracket )+

        ( LOOKAHEAD(2) "[" "]" )*
}


/*
 * Statement syntax follows.
 */

void Statement() :
{}
{
  LOOKAHEAD(2)
  LabeledStatement()
|
  Block()
|
  EmptyStatement()
|
  StatementExpression() ";"
|
  SwitchStatement()
|
  IfStatement()
|
  WhileStatement()
|
  DoStatement()
|
  ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement()
|
  ThrowStatement()
|
  SynchronizedStatement()
|
  TryStatement()

}

void LabeledStatement() :
{}
{
  <IDENTIFIER> ":" Statement()
}

void Block() :
{Token t;}
{
  ({t = getToken(1);}
  "{"
   ( BlockStatement() )*
   "}"
   {setFirstLastToken(jjtThis, t, getToken(0));})#Block
}

void BlockStatement() :
{}
{
  LOOKAHEAD([ "final" ] Type() <IDENTIFIER>)
  LocalVariableDeclaration() ";"
|
  Statement()

}

void LocalVariableDeclaration() :
{Token t;}
{
  ({
    t = getToken(1);
    }

  [ "final" ] Type() VariableDeclarator() ( "," VariableDeclarator() )*
  { setFirstLastToken(jjtThis, t, getToken(1));})#LocalVariableDeclaration
}

void EmptyStatement() :
{}
{
  ";"
}

void StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression. TODO
 */
{ Token t; }
{
 ( {
     t = getToken(1);
   }

 (PreIncrementExpression()
|
  PreDecrementExpression()
|
  LOOKAHEAD( PrimaryExpression() AssignmentOperator() )
  Assignment()
|
  PostfixExpression())
  {
    setFirstLastToken(jjtThis, t, getToken(1));
  }) #StatementExpression //Create node
}

void SwitchStatement() :
{Token t;}
{ ({
    t = getToken(1);
    }
  "switch" "(" Expression() ")" "{"
    ( SwitchLabel() ( BlockStatement() )* )*
  "}"
  { setFirstLastToken(jjtThis, t, getToken(0));})#SwitchStatement
}

void SwitchLabel() :
{Token t;}
{ ({
    t = getToken(1);
    }
  "case" Expression() ":" { setFirstLastToken(jjtThis, t, getToken(0)); })#CaseSwitchLabel
|
  ({
      t = getToken(1);
      }
      "default" ":" { setFirstLastToken(jjtThis, t, getToken(1)); })#DefaultSwitchLabel

}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  int num = readInt();
 * The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{
    Token t;
}
{
  ({
    t = getToken(1);
  }
  "if" "(" Expression() ")" Block()
    {
        setFirstLastToken(jjtThis, t, getToken(0));
    })#IfStatement

   [(LOOKAHEAD(2)
   ({
    t = getToken(1);
    }
    "else" "if" "(" Expression() ")" Block()
   {
      setFirstLastToken(jjtThis, t, getToken(0));
   })#ElseIfStatement )*

   ({
   t = getToken(1);
   }
   "else" Block()
   {
    setFirstLastToken(jjtThis, t, getToken(0));
    })#ElseStatement ]
     //Do not permit braceless statements - SK


}

void WhileStatement() :
{
    Token t;
}
{ ({
      t = getToken(1);
   }
  "while" "(" Expression() ")" Block() //Do not permit braceless statements - SK
     {
        setFirstLastToken(jjtThis, t, getToken(0));
     })#WhileStatement

}

void DoStatement() :
{}
{ ({
    Token t = getToken(1);
    }
  "do" Block() {
    setFirstLastToken(jjtThis, t, getToken(0));
                })#DoStatement

     WhileAfterDo()

}

void WhileAfterDo() :
{Token t;}
{
({ t = getToken(1); }
"while" "(" Expression() ")"
{
    setFirstLastToken(jjtThis, t, getToken(1));
})#WhileAfterDo ";"
}

void ForStatement() :
{
    Token t;
}
{
  ({
    t = getToken(1);
    }
    "for" "("
            ForInit() ";" [ Expression() ] (";")#ForSemicolon [ ForUpdate() ]
            ")" (Block())#ForBlock
             {
    setFirstLastToken(jjtThis, t, getToken(0));
             })#ForStatement //Do not permit braceless statements - SK
}

void ForInit() :
{}
{
  LOOKAHEAD( [ "final" ] Type() <IDENTIFIER> )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}

void StatementExpressionList() :
{}
{
  StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate() :
{}
{
  StatementExpressionList()
}

void BreakStatement() :
{ Token t; }
{
  ({
    t = getToken(1);
    } "break" [ <IDENTIFIER> ] ";"
    {
    setFirstLastToken(jjtThis, t, getToken(1));
    })#BreakStatement
}

void ContinueStatement() :
{ Token t; }
{
  ({
    t = getToken(1);
    } "continue" [ <IDENTIFIER> ] ";"
    {
    setFirstLastToken(jjtThis, t, getToken(1));
    })#ContinueStatement
}

void ReturnStatement() :
{Token t;}
{
  ({
   t = getToken(1);
  } "return" [ Expression() ] ";"
  {
  setFirstLastToken(jjtThis, t, getToken(0));
  })#ReturnStatement
}

void ThrowStatement() :
{}
{
  "throw" Expression() ";"
}

void SynchronizedStatement() :
{}
{
  "synchronized" "(" Expression() ")" Block()
}

void TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{}
{
  ({
  Token t = getToken(1);
  }"try" Block()
  ({
    Token t1 = getToken(1);
    }( "catch" "(" FormalParameter() ")" Block() )* { setFirstLastToken(jjtThis, t1, getToken(0)); })#Catch
  [ ({
      Token t2 = getToken(1);
      }
      "finally" Block() { setFirstLastToken(jjtThis, t2, getToken(0)); })#Finally ]
      { setFirstLastToken(jjtThis, t, getToken(0)); })#Try
}

/**
 * Decaf Grammar starts here - SK
 */

void DecafClass() :
{}
{
    (DecafMain()
   (DecafMethod())*
   (NestedClassDeclaration())* )#DecafClass

}


/*
 * Unencapsulated Decaf floating code or methods
 */
void DecafMain() :
{Token t;}
{

    ({
    t = getToken(1);
    }
    (LOOKAHEAD(3) BlockStatement())+
    {
    setFirstLastToken(jjtThis, t, getToken(0));
    })  #DecafMain

}

/*
* Method that comes after the "floating" code in a Decaf file.
* Prevents being confused for Block() and Decaf method calls not being substituted
*/
void DecafMethod() :
{Token t;}
{
    ({
    t = getToken(1); //first word of method declaration - likely the return type
    t.specialToken.image = " "; //remove the newline from the first token
    /* If there's two newlines before the method, remove the special token to avoid
     too many line breaks */
    if (t.specialToken.specialToken != null) {
        t.specialToken.specialToken = null;
        }
    }
  ResultType() MethodDeclarator() [ "throws" NameList() ]
  Block()
  {
      setFirstLastToken(jjtThis, t, getToken(0));
      })  #DecafMethod
}

JAVACODE
void setFirstLastToken(SimpleNode jjtThis, Token t1, Token t2) {
    jjtThis.setFirstToken(t1);
    jjtThis.setLastToken(t2);
}

JAVACODE
void addErrorMessage(ParseException ex) {
    String msg = ex.getMessage();
    if (!errorList.contains(msg)) {
        errorList.add(msg);
    }
}

JAVACODE
void recoverFromError(int endKind) {
    Token t;
    do {
        t = getNextToken();
        /* Skip forward to the next occurrence of endKind */
    } while (t.kind != endKind && t.kind != EOF);
    }