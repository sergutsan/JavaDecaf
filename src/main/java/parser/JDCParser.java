/* Generated By:JJTree&JavaCC: Do not edit this line. JDCParser.java */
package parser;
import ast.*;

import java.io.*;
import java.util.List;
import java.util.ArrayList;

public class JDCParser/*@bgen(jjtree)*/implements JDCParserTreeConstants, JDCParserConstants {/*@bgen(jjtree)*/
  protected JJTJDCParserState jjtree = new JJTJDCParserState();private List<String> warnings = new ArrayList<String>(); // list of warnings
    private List<String> errors = new ArrayList<String>(); //list of errors
    private String className;

/* Constructor with className calls normal constructor with encoding. */
    public JDCParser(InputStream fis, String className, String encoding){
        this(fis, encoding);
        this.className = className;
        this.disable_tracing(); //Default - no debugging. This is re-enabled in main class if user requests

    }

    /**
    * Get the name of the class
    */
    public String getClassName() {
        return className;
        }


    /**
    *  Test whether a given identifier is a legal method name: must begin with lower case letter.
    * Throw MethodNameParseException if not legal.
    * @param t - the token of the identifier in question
    */
    public void checkMethodName(Token t) throws MethodNameParseException {
        if (Character.isUpperCase(t.image.charAt(0))){
           errors.add((new MethodNameParseException(t)).getMessage());
        }
    }

    /**
        *  Test whether a given identifier is a legal class name: must begin with upper case letter.
        * Throw ClassNameParseException if not legal.
        * @param t - the token of the identifier in question
        */
    public void checkClassName(Token t) throws ClassNameParseException {
            if (Character.isLowerCase(t.image.charAt(0))){
                errors.add((new ClassNameParseException(t)).getMessage());
            }
        }
    /**
        *  Test whether a given identifier is a legal variable name: must begin with lower case letter
        * unless the variable is in all caps (constant name)
        * Throw ParseException if not legal.
        * @param t - the token of the identifier in question
        */
    public void checkVariableName(Token t) throws VariableNameParseException {
            if (Character.isUpperCase(t.image.charAt(0))) {
                int lowerCount = 0;
                for (char c: t.image.toCharArray()) {
                    if (Character.isLowerCase(c)) {
                        lowerCount++;
                    }
                }
                /* if the first letter is a capital and there are lower case letters in the rest of the name,
                    throw an exception */
                if (lowerCount != 0) {
                     errors.add((new VariableNameParseException(t)).getMessage());
                }


            }
        }

    /**
     * Add a warning to the internal warning list to be printed at the end.
     * @param warning - the warning to add
     */
     protected void addWarning(String warning) {
        warnings.add(warning);
        }

     /**
     * Get the warning list
     * @return the list of warnings
     */
     protected List<String> getWarningList() {
        return warnings;
     }

     /**
     * see if the warning list contains any warnings
     * @return true if there are warnings, false otherwise
     */
     protected boolean hasWarnings(){
        return warnings.size() > 0;
        }

     /**
     * Get the error list
     * @return the list of errors
     */
     protected List<String> getErrorList() {
        return errors;
     }

     /**
     * See if the error list contains any errors
     * @return true if there are errors, false otherwise
     */
     protected boolean hasErrors() {
        return errors.size() > 0;
     }

/* End code NOT modified by SK */

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
/*
 * Edited by Sophie Koonin
 */
  final public ASTCompilationUnit CompilationUnit() throws ParseException {
    trace_call("CompilationUnit");
    try {
 /*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(this, JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        try {
          jjtn000.setFirstToken(getToken(1));
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PACKAGE:
            PackageDeclaration();
            break;
          default:
            jj_la1[0] = jj_gen;
            ;
          }
          label_1:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IMPORT:
              ;
              break;
            default:
              jj_la1[1] = jj_gen;
              break label_1;
            }
            ImportDeclaration();
          }
          if (jj_2_1(3)) {
            label_2:
            while (true) {
              TypeDeclaration();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case ABSTRACT:
              case CLASS:
              case FINAL:
              case INTERFACE:
              case PUBLIC:
              case SEMICOLON:
                ;
                break;
              default:
                jj_la1[2] = jj_gen;
                break label_2;
              }
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BOOLEAN:
            case BREAK:
            case BYTE:
            case CHAR:
            case CONTINUE:
            case DO:
            case DOUBLE:
            case FALSE:
            case FINAL:
            case FLOAT:
            case FOR:
            case IF:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case RETURN:
            case SHORT:
            case SUPER:
            case SWITCH:
            case SYNCHRONIZED:
            case THIS:
            case THROW:
            case TRUE:
            case TRY:
            case WHILE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
            case SEMICOLON:
            case INCR:
            case DECR:
              DecafClass();
              break;
            default:
              jj_la1[3] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          jj_consume_token(0);
        } catch (ParseException ex) {
      addErrorMessage(ex); //Add the message of the exception to the internal error list
      recoverFromError(SEMICOLON); //Skip to next semicolon and continue parsing

        }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      //((SimpleNode)jjtree.rootNode()).dump(">"); //Dump nodes to console
      {if (true) return jjtn000;}
      } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
      } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("CompilationUnit");
    }
  }

  final public void PackageDeclaration() throws ParseException {
    trace_call("PackageDeclaration");
    try {
 Token t;
    ASTPackageDeclaration jjtn001 = new ASTPackageDeclaration(this, JJTPACKAGEDECLARATION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        jj_consume_token(PACKAGE);
        Name();
        jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("PackageDeclaration");
    }
  }

  final public void ImportDeclaration() throws ParseException {
    trace_call("ImportDeclaration");
    try {
 Token t;
    ASTImportDeclaration jjtn001 = new ASTImportDeclaration(this, JJTIMPORTDECLARATION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        jj_consume_token(IMPORT);
        Name();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          jj_consume_token(STAR);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
      setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("ImportDeclaration");
    }
  }

  final public void TypeDeclaration() throws ParseException {
    trace_call("TypeDeclaration");
    try {
      if (jj_2_2(2147483647)) {
        ClassDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case INTERFACE:
        case PUBLIC:
          InterfaceDeclaration();
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("TypeDeclaration");
    }
  }

/*
 * Declaration syntax follows.
 */
  final public void ClassDeclaration() throws ParseException {
    trace_call("ClassDeclaration");
    try {
 Token t;
    ASTClassDeclaration jjtn001 = new ASTClassDeclaration(this, JJTCLASSDECLARATION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
          case FINAL:
          case PUBLIC:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_3;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
            jj_consume_token(ABSTRACT);
            break;
          case FINAL:
            jj_consume_token(FINAL);
            break;
          case PUBLIC:
            jj_consume_token(PUBLIC);
            break;
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        UnmodifiedClassDeclaration();
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("ClassDeclaration");
    }
  }

  final public void UnmodifiedClassDeclaration() throws ParseException {
    trace_call("UnmodifiedClassDeclaration");
    try {
      jj_consume_token(CLASS);
      jj_consume_token(IDENTIFIER);
                         checkClassName(getToken(0));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        Name();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        NameList();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      ClassBody();
    } finally {
      trace_return("UnmodifiedClassDeclaration");
    }
  }

  final public void ClassBody() throws ParseException {
    trace_call("ClassBody");
    try {
      jj_consume_token(LBRACE);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case LBRACE:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
        ClassBodyDeclaration();
      }
      jj_consume_token(RBRACE);
    } finally {
      trace_return("ClassBody");
    }
  }

  final public void NestedClassDeclaration() throws ParseException {
    trace_call("NestedClassDeclaration");
    try {
 Token t;
    ASTNestedClassDeclaration jjtn001 = new ASTNestedClassDeclaration(this, JJTNESTEDCLASSDECLARATION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
  t = getToken(1);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
          case FINAL:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case STATIC:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_5;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STATIC:
            jj_consume_token(STATIC);
            break;
          case ABSTRACT:
            jj_consume_token(ABSTRACT);
            break;
          case FINAL:
            jj_consume_token(FINAL);
            break;
          case PUBLIC:
            jj_consume_token(PUBLIC);
            break;
          case PROTECTED:
            jj_consume_token(PROTECTED);
            break;
          case PRIVATE:
            jj_consume_token(PRIVATE);
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        UnmodifiedClassDeclaration();
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("NestedClassDeclaration");
    }
  }

  final public void ClassBodyDeclaration() throws ParseException {
    trace_call("ClassBodyDeclaration");
    try {
      if (jj_2_3(2)) {
        Initializer();
      } else if (jj_2_4(2147483647)) {
        NestedClassDeclaration();
      } else if (jj_2_5(2147483647)) {
        NestedInterfaceDeclaration();
      } else if (jj_2_6(2147483647)) {
        ConstructorDeclaration();
      } else if (jj_2_7(2147483647)) {
        MethodDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case TRANSIENT:
        case VOLATILE:
        case IDENTIFIER:
          FieldDeclaration();
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("ClassBodyDeclaration");
    }
  }

// This production is to determine lookahead only.
  final public void MethodDeclarationLookahead() throws ParseException {
    trace_call("MethodDeclarationLookahead");
    try {
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case FINAL:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case SYNCHRONIZED:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
          break;
        case STATIC:
          jj_consume_token(STATIC);
          break;
        case ABSTRACT:
          jj_consume_token(ABSTRACT);
          break;
        case FINAL:
          jj_consume_token(FINAL);
          break;
        case NATIVE:
          jj_consume_token(NATIVE);
          break;
        case SYNCHRONIZED:
          jj_consume_token(SYNCHRONIZED);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      ResultType();
      jj_consume_token(IDENTIFIER);
                              checkMethodName(getToken(0)); //test the method name

      jj_consume_token(LPAREN);
    } finally {
      trace_return("MethodDeclarationLookahead");
    }
  }

  final public void InterfaceDeclaration() throws ParseException {
    trace_call("InterfaceDeclaration");
    try {
 Token t;
    ASTInterfaceDeclaration jjtn001 = new ASTInterfaceDeclaration(this, JJTINTERFACEDECLARATION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
          case PUBLIC:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_7;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
            jj_consume_token(ABSTRACT);
            break;
          case PUBLIC:
            jj_consume_token(PUBLIC);
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        UnmodifiedInterfaceDeclaration();
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("InterfaceDeclaration");
    }
  }

  final public void NestedInterfaceDeclaration() throws ParseException {
    trace_call("NestedInterfaceDeclaration");
    try {
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case FINAL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC:
          jj_consume_token(STATIC);
          break;
        case ABSTRACT:
          jj_consume_token(ABSTRACT);
          break;
        case FINAL:
          jj_consume_token(FINAL);
          break;
        case PUBLIC:
          jj_consume_token(PUBLIC);
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      UnmodifiedInterfaceDeclaration();
    } finally {
      trace_return("NestedInterfaceDeclaration");
    }
  }

  final public void UnmodifiedInterfaceDeclaration() throws ParseException {
    trace_call("UnmodifiedInterfaceDeclaration");
    try {
      jj_consume_token(INTERFACE);
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        NameList();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_9;
        }
        InterfaceMemberDeclaration();
      }
      jj_consume_token(RBRACE);
    } finally {
      trace_return("UnmodifiedInterfaceDeclaration");
    }
  }

  final public void InterfaceMemberDeclaration() throws ParseException {
    trace_call("InterfaceMemberDeclaration");
    try {
      if (jj_2_8(2147483647)) {
        NestedClassDeclaration();
      } else if (jj_2_9(2147483647)) {
        NestedInterfaceDeclaration();
      } else if (jj_2_10(2147483647)) {
        MethodDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case TRANSIENT:
        case VOLATILE:
        case IDENTIFIER:
          FieldDeclaration();
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("InterfaceMemberDeclaration");
    }
  }

  final public void FieldDeclaration() throws ParseException {
    trace_call("FieldDeclaration");
    try {
 Token t;
    ASTFieldDeclaration jjtn001 = new ASTFieldDeclaration(this, JJTFIELDDECLARATION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FINAL:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case STATIC:
          case TRANSIENT:
          case VOLATILE:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_10;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PUBLIC:
            jj_consume_token(PUBLIC);
            break;
          case PROTECTED:
            jj_consume_token(PROTECTED);
            break;
          case PRIVATE:
            jj_consume_token(PRIVATE);
            break;
          case STATIC:
            jj_consume_token(STATIC);
            break;
          case FINAL:
            jj_consume_token(FINAL);
            break;
          case TRANSIENT:
            jj_consume_token(TRANSIENT);
            break;
          case VOLATILE:
            jj_consume_token(VOLATILE);
            break;
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        Type();
        VariableDeclarator();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[25] = jj_gen;
            break label_11;
          }
          jj_consume_token(COMMA);
          VariableDeclarator();
        }
        jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("FieldDeclaration");
    }
  }

  final public void VariableDeclarator() throws ParseException {
    trace_call("VariableDeclarator");
    try {
      VariableDeclaratorId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        VariableInitializer();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
    } finally {
      trace_return("VariableDeclarator");
    }
  }

  final public void VariableDeclaratorId() throws ParseException {
    trace_call("VariableDeclaratorId");
    try {
      jj_consume_token(IDENTIFIER);
                 checkVariableName(getToken(0));
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_12;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } finally {
      trace_return("VariableDeclaratorId");
    }
  }

  final public void VariableInitializer() throws ParseException {
    trace_call("VariableInitializer");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ArrayInitializer();
        break;
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        Expression();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("VariableInitializer");
    }
  }

  final public void ArrayInitializer() throws ParseException {
    trace_call("ArrayInitializer");
    try {
 Token t;
    ASTArrayInitialiser jjtn002 = new ASTArrayInitialiser(this, JJTARRAYINITIALISER);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
  t = getToken(1);
        jj_consume_token(LBRACE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          VariableInitializer();
          label_13:
          while (true) {
            if (jj_2_11(2)) {
              ;
            } else {
              break label_13;
            }
                                               ASTComma jjtn001 = new ASTComma(this, JJTCOMMA);
                                               boolean jjtc001 = true;
                                               jjtree.openNodeScope(jjtn001);
            try {
              jj_consume_token(COMMA);
            } finally {
                                               if (jjtc001) {
                                                 jjtree.closeNodeScope(jjtn001, true);
                                               }
            }
            VariableInitializer();
          }
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        jj_consume_token(RBRACE);
    jjtree.closeNodeScope(jjtn002, true);
    jjtc002 = false;
    setFirstLastToken(jjtn002, t, getToken(0));
      } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
    } finally {
      trace_return("ArrayInitializer");
    }
  }

  final public void MethodDeclaration() throws ParseException {
    trace_call("MethodDeclaration");
    try {
 Token t;
    ASTMethodDeclaration jjtn001 = new ASTMethodDeclaration(this, JJTMETHODDECLARATION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
          case FINAL:
          case NATIVE:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case STATIC:
          case SYNCHRONIZED:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_14;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PUBLIC:
            jj_consume_token(PUBLIC);
            break;
          case PROTECTED:
            jj_consume_token(PROTECTED);
            break;
          case PRIVATE:
            jj_consume_token(PRIVATE);
            break;
          case STATIC:
            jj_consume_token(STATIC);
            break;
          case ABSTRACT:
            jj_consume_token(ABSTRACT);
            break;
          case FINAL:
            jj_consume_token(FINAL);
            break;
          case NATIVE:
            jj_consume_token(NATIVE);
            break;
          case SYNCHRONIZED:
            jj_consume_token(SYNCHRONIZED);
            break;
          default:
            jj_la1[32] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        ResultType();
        MethodDeclarator();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case THROWS:
          jj_consume_token(THROWS);
          NameList();
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          Block();
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
     jjtree.closeNodeScope(jjtn001, true);
     jjtc001 = false;
     setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("MethodDeclaration");
    }
  }

  final public void MethodDeclarator() throws ParseException {
    trace_call("MethodDeclarator");
    try {
      jj_consume_token(IDENTIFIER);
  checkMethodName(getToken(0)); //Check validity of the method name

      FormalParameters();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_15;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } finally {
      trace_return("MethodDeclarator");
    }
  }

  final public void FormalParameters() throws ParseException {
    trace_call("FormalParameters");
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
        FormalParameter();
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[36] = jj_gen;
            break label_16;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } finally {
      trace_return("FormalParameters");
    }
  }

  final public void FormalParameter() throws ParseException {
    trace_call("FormalParameter");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        jj_consume_token(FINAL);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      Type();
      VariableDeclaratorId();
    } finally {
      trace_return("FormalParameter");
    }
  }

  final public void ConstructorDeclaration() throws ParseException {
    trace_call("ConstructorDeclaration");
    try {
 Token t;
    ASTConstructorDeclaration jjtn001 = new ASTConstructorDeclaration(this, JJTCONSTRUCTORDECLARATION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PUBLIC:
            jj_consume_token(PUBLIC);
            break;
          case PROTECTED:
            jj_consume_token(PROTECTED);
            break;
          case PRIVATE:
            jj_consume_token(PRIVATE);
            break;
          default:
            jj_la1[39] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        jj_consume_token(IDENTIFIER);
        FormalParameters();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case THROWS:
          jj_consume_token(THROWS);
          NameList();
          break;
        default:
          jj_la1[41] = jj_gen;
          ;
        }
        jj_consume_token(LBRACE);
        if (jj_2_12(2147483647)) {
          ExplicitConstructorInvocation();
        } else {
          ;
        }
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BREAK:
          case BYTE:
          case CHAR:
          case CONTINUE:
          case DO:
          case DOUBLE:
          case FALSE:
          case FINAL:
          case FLOAT:
          case FOR:
          case IF:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case RETURN:
          case SHORT:
          case SUPER:
          case SWITCH:
          case SYNCHRONIZED:
          case THIS:
          case THROW:
          case TRUE:
          case TRY:
          case WHILE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case LBRACE:
          case SEMICOLON:
          case INCR:
          case DECR:
            ;
            break;
          default:
            jj_la1[42] = jj_gen;
            break label_17;
          }
          BlockStatement();
        }
        jj_consume_token(RBRACE);
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
   setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("ConstructorDeclaration");
    }
  }

  final public void ExplicitConstructorInvocation() throws ParseException {
    trace_call("ExplicitConstructorInvocation");
    try {
      if (jj_2_14(2147483647)) {
        jj_consume_token(THIS);
        Arguments();
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          if (jj_2_13(2)) {
            PrimaryExpression();
            jj_consume_token(DOT);
          } else {
            ;
          }
          jj_consume_token(SUPER);
          Arguments();
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("ExplicitConstructorInvocation");
    }
  }

  final public void Initializer() throws ParseException {
    trace_call("Initializer");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      Block();
    } finally {
      trace_return("Initializer");
    }
  }

/*
 * Type, name and expression syntax follows.
 */
  final public void Type() throws ParseException {
    trace_call("Type");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        PrimitiveType();
        break;
      case IDENTIFIER:
        Name();
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_18;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } finally {
      trace_return("Type");
    }
  }

  final public void PrimitiveType() throws ParseException {
    trace_call("PrimitiveType");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case BYTE:
        jj_consume_token(BYTE);
        break;
      case SHORT:
        jj_consume_token(SHORT);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      case LONG:
        jj_consume_token(LONG);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("PrimitiveType");
    }
  }

  final public void ResultType() throws ParseException {
    trace_call("ResultType");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        jj_consume_token(VOID);
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
        Type();
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ResultType");
    }
  }

  final public void Name() throws ParseException {
    trace_call("Name");
    try {
      jj_consume_token(IDENTIFIER);
      label_19:
      while (true) {
        if (jj_2_15(2)) {
          ;
        } else {
          break label_19;
        }
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
      }
    } finally {
      trace_return("Name");
    }
  }

  final public void NameList() throws ParseException {
    trace_call("NameList");
    try {
      Name();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_20;
        }
        jj_consume_token(COMMA);
        Name();
      }
    } finally {
      trace_return("NameList");
    }
  }

/*
 * Expression syntax follows.
 */
  final public void Expression() throws ParseException {
    trace_call("Expression");
    try {
      if (jj_2_16(2147483647)) {
        Assignment();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          ConditionalExpression();
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("Expression");
    }
  }

  final public void Assignment() throws ParseException {
    trace_call("Assignment");
    try {
 Token t;
    ASTAssignment jjtn001 = new ASTAssignment(this, JJTASSIGNMENT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
  t = getToken(1);
        PrimaryExpression();
        AssignmentOperator();
        Expression();
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("Assignment");
    }
  }

  final public void AssignmentOperator() throws ParseException {
    trace_call("AssignmentOperator");
    try {
 Token t;
    ASTAssignmentOperator jjtn001 = new ASTAssignmentOperator(this, JJTASSIGNMENTOPERATOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          break;
        case STARASSIGN:
          jj_consume_token(STARASSIGN);
          break;
        case SLASHASSIGN:
          jj_consume_token(SLASHASSIGN);
          break;
        case REMASSIGN:
          jj_consume_token(REMASSIGN);
          break;
        case PLUSASSIGN:
          jj_consume_token(PLUSASSIGN);
          break;
        case MINUSASSIGN:
          jj_consume_token(MINUSASSIGN);
          break;
        case LSHIFTASSIGN:
          jj_consume_token(LSHIFTASSIGN);
          break;
        case RSIGNEDSHIFTASSIGN:
          jj_consume_token(RSIGNEDSHIFTASSIGN);
          break;
        case RUNSIGNEDSHIFTASSIGN:
          jj_consume_token(RUNSIGNEDSHIFTASSIGN);
          break;
        case ANDASSIGN:
          jj_consume_token(ANDASSIGN);
          break;
        case XORASSIGN:
          jj_consume_token(XORASSIGN);
          break;
        case ORASSIGN:
          jj_consume_token(ORASSIGN);
          break;
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    setFirstLastToken(jjtn001, t, getToken(1));
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("AssignmentOperator");
    }
  }

  final public void ConditionalExpression() throws ParseException {
    trace_call("ConditionalExpression");
    try {
 Token t;
    ASTConditionalExpression jjtn003 = new ASTConditionalExpression(this, JJTCONDITIONALEXPRESSION);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
   t = getToken(1);
        ConditionalOrExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HOOK:
                               ASTTernaryQuestionMark jjtn001 = new ASTTernaryQuestionMark(this, JJTTERNARYQUESTIONMARK);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(HOOK);
          } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, true);
                               }
          }
          Expression();
                                                                      ASTTernaryColon jjtn002 = new ASTTernaryColon(this, JJTTERNARYCOLON);
                                                                      boolean jjtc002 = true;
                                                                      jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(COLON);
          } finally {
                                                                      if (jjtc002) {
                                                                        jjtree.closeNodeScope(jjtn002, true);
                                                                      }
          }
          ConditionalExpression();
          break;
        default:
          jj_la1[52] = jj_gen;
          ;
        }
    jjtree.closeNodeScope(jjtn003, true);
    jjtc003 = false;
    setFirstLastToken(jjtn003, t, getToken(1));
      } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
    } finally {
      trace_return("ConditionalExpression");
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
    trace_call("ConditionalOrExpression");
    try {
 Token t = null;
      ConditionalAndExpression();
                               ASTConditionalOr jjtn001 = new ASTConditionalOr(this, JJTCONDITIONALOR);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
      try {
        label_21:
        while (true) {
          if (jj_2_17(2)) {
            ;
          } else {
            break label_21;
          }
     t = getToken(1);
          jj_consume_token(SC_OR);
          ConditionalAndExpression();
        }
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtc001 = false;
                                        setFirstLastToken(jjtn001, t, getToken(1));
      } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte001;}
                               }
                               if (jjte001 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte001;}
                               }
                               {if (true) throw (Error)jjte001;}
      } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, true);
                               }
      }
    } finally {
      trace_return("ConditionalOrExpression");
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    trace_call("ConditionalAndExpression");
    try {
 Token t = null;
      InclusiveOrExpression();
    ASTConditionalAnd jjtn001 = new ASTConditionalAnd(this, JJTCONDITIONALAND);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        label_22:
        while (true) {
          if (jj_2_18(2)) {
            ;
          } else {
            break label_22;
          }
          jj_consume_token(SC_AND);
          ConditionalOrExpression();
        }
                                  jjtree.closeNodeScope(jjtn001, true);
                                  jjtc001 = false;
                                   setFirstLastToken(jjtn001, t, getToken(1));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("ConditionalAndExpression");
    }
  }

  final public void InclusiveOrExpression() throws ParseException {
    trace_call("InclusiveOrExpression");
    try {
      ExclusiveOrExpression();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIT_OR:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_23;
        }
        jj_consume_token(BIT_OR);
        ExclusiveOrExpression();
      }
    } finally {
      trace_return("InclusiveOrExpression");
    }
  }

  final public void ExclusiveOrExpression() throws ParseException {
    trace_call("ExclusiveOrExpression");
    try {
      AndExpression();
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XOR:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_24;
        }
        jj_consume_token(XOR);
        AndExpression();
      }
    } finally {
      trace_return("ExclusiveOrExpression");
    }
  }

  final public void AndExpression() throws ParseException {
    trace_call("AndExpression");
    try {
      EqualityExpression();
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIT_AND:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_25;
        }
        jj_consume_token(BIT_AND);
        EqualityExpression();
      }
    } finally {
      trace_return("AndExpression");
    }
  }

  final public void EqualityExpression() throws ParseException {
    trace_call("EqualityExpression");
    try {
 Token t;
      InstanceOfExpression();
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case NE:
          ;
          break;
        default:
          jj_la1[56] = jj_gen;
          break label_26;
        }
                             ASTEqualityOperator jjtn001 = new ASTEqualityOperator(this, JJTEQUALITYOPERATOR);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
        try {
                             t = getToken(1);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQ:
            jj_consume_token(EQ);
            break;
          case NE:
            jj_consume_token(NE);
            break;
          default:
            jj_la1[57] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                                jjtree.closeNodeScope(jjtn001, true);
                                                                jjtc001 = false;
                                                               setFirstLastToken(jjtn001, t, getToken(1));
        } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001, true);
                             }
        }
        InstanceOfExpression();
      }
    } finally {
      trace_return("EqualityExpression");
    }
  }

  final public void InstanceOfExpression() throws ParseException {
    trace_call("InstanceOfExpression");
    try {
      RelationalExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTANCEOF:
        jj_consume_token(INSTANCEOF);
        Type();
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
    } finally {
      trace_return("InstanceOfExpression");
    }
  }

  final public void RelationalExpression() throws ParseException {
    trace_call("RelationalExpression");
    try {
 Token t;
      ShiftExpression();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
        case LT:
        case LE:
        case GE:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_27;
        }
                        ASTRelationalOperator jjtn001 = new ASTRelationalOperator(this, JJTRELATIONALOPERATOR);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
        try {
    t = getToken(1);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LT:
            jj_consume_token(LT);
            break;
          case GT:
            jj_consume_token(GT);
            break;
          case LE:
            jj_consume_token(LE);
            break;
          case GE:
            jj_consume_token(GE);
            break;
          default:
            jj_la1[60] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      setFirstLastToken(jjtn001, t, getToken(1));
        } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                        }
        }
        ShiftExpression();
      }
    } finally {
      trace_return("RelationalExpression");
    }
  }

  final public void ShiftExpression() throws ParseException {
    trace_call("ShiftExpression");
    try {
      AdditiveExpression();
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSHIFT:
        case RSIGNEDSHIFT:
        case RUNSIGNEDSHIFT:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_28;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSHIFT:
          jj_consume_token(LSHIFT);
          break;
        case RSIGNEDSHIFT:
          jj_consume_token(RSIGNEDSHIFT);
          break;
        case RUNSIGNEDSHIFT:
          jj_consume_token(RUNSIGNEDSHIFT);
          break;
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        AdditiveExpression();
      }
    } finally {
      trace_return("ShiftExpression");
    }
  }

  final public void AdditiveExpression() throws ParseException {
    trace_call("AdditiveExpression");
    try {
 Token t;
      MultiplicativeExpression();
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[63] = jj_gen;
          break label_29;
        }
                                 ASTAdditiveOperator jjtn001 = new ASTAdditiveOperator(this, JJTADDITIVEOPERATOR);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
        try {
                                  t = getToken(1);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
            jj_consume_token(PLUS);
            break;
          case MINUS:
            jj_consume_token(MINUS);
            break;
          default:
            jj_la1[64] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                                    jjtree.closeNodeScope(jjtn001, true);
                                                                    jjtc001 = false;
                                                                    setFirstLastToken(jjtn001, t, getToken(1));
        } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001, true);
                                 }
        }
        MultiplicativeExpression();
      }
    } finally {
      trace_return("AdditiveExpression");
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    trace_call("MultiplicativeExpression");
    try {
 Token t;
      UnaryExpression();
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case SLASH:
        case REM:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          break label_30;
        }
                        ASTMultiplicativeOperator jjtn001 = new ASTMultiplicativeOperator(this, JJTMULTIPLICATIVEOPERATOR);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
        try {
                         t = getToken(1);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STAR:
            jj_consume_token(STAR);
            break;
          case SLASH:
            jj_consume_token(SLASH);
            break;
          case REM:
            jj_consume_token(REM);
            break;
          default:
            jj_la1[66] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                                  jjtree.closeNodeScope(jjtn001, true);
                                                                  jjtc001 = false;
                                                                  setFirstLastToken(jjtn001, t, getToken(1));
        } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                        }
        }
        UnaryExpression();
      }
    } finally {
      trace_return("MultiplicativeExpression");
    }
  }

  final public void UnaryExpression() throws ParseException {
    trace_call("UnaryExpression");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
        break;
      case INCR:
        PreIncrementExpression();
        break;
      case DECR:
        PreDecrementExpression();
        break;
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
        UnaryExpressionNotPlusMinus();
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("UnaryExpression");
    }
  }

  final public void PreIncrementExpression() throws ParseException {
    trace_call("PreIncrementExpression");
    try {
      jj_consume_token(INCR);
      PrimaryExpression();
    } finally {
      trace_return("PreIncrementExpression");
    }
  }

  final public void PreDecrementExpression() throws ParseException {
    trace_call("PreDecrementExpression");
    try {
      jj_consume_token(DECR);
      PrimaryExpression();
    } finally {
      trace_return("PreDecrementExpression");
    }
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {
    trace_call("UnaryExpressionNotPlusMinus");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
      case TILDE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
          break;
        case BANG:
          jj_consume_token(BANG);
          break;
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
        break;
      default:
        jj_la1[70] = jj_gen;
        if (jj_2_19(2147483647)) {
          CastExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FALSE:
          case NEW:
          case NULL:
          case SUPER:
          case THIS:
          case TRUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
            PostfixExpression();
            break;
          default:
            jj_la1[71] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("UnaryExpressionNotPlusMinus");
    }
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  final public void CastLookahead() throws ParseException {
    trace_call("CastLookahead");
    try {
      if (jj_2_20(2)) {
        jj_consume_token(LPAREN);
        PrimitiveType();
      } else if (jj_2_21(2147483647)) {
        jj_consume_token(LPAREN);
        Name();
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          Name();
          jj_consume_token(RPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TILDE:
            jj_consume_token(TILDE);
            break;
          case BANG:
            jj_consume_token(BANG);
            break;
          case LPAREN:
            jj_consume_token(LPAREN);
            break;
          case IDENTIFIER:
            jj_consume_token(IDENTIFIER);
            break;
          case THIS:
            jj_consume_token(THIS);
            break;
          case SUPER:
            jj_consume_token(SUPER);
            break;
          case NEW:
            jj_consume_token(NEW);
            break;
          case FALSE:
          case NULL:
          case TRUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
            Literal();
            break;
          default:
            jj_la1[72] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("CastLookahead");
    }
  }

  final public void PostfixExpression() throws ParseException {
    trace_call("PostfixExpression");
    try {
 Token t;
      PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
      case DECR:
                          ASTIncrementDecrement jjtn001 = new ASTIncrementDecrement(this, JJTINCREMENTDECREMENT);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
        try {
                          t = getToken(1);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INCR:
            jj_consume_token(INCR);
            break;
          case DECR:
            jj_consume_token(DECR);
            break;
          default:
            jj_la1[74] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                             jjtree.closeNodeScope(jjtn001, true);
                                                             jjtc001 = false;
                                                             setFirstLastToken(jjtn001, t, getToken(1));
        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
        }
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
    } finally {
      trace_return("PostfixExpression");
    }
  }

  final public void CastExpression() throws ParseException {
    trace_call("CastExpression");
    try {
      if (jj_2_22(2147483647)) {
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(RPAREN);
        UnaryExpression();
      } else if (jj_2_23(2147483647)) {
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(RPAREN);
        UnaryExpressionNotPlusMinus();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("CastExpression");
    }
  }

  final public void PrimaryExpression() throws ParseException {
    trace_call("PrimaryExpression");
    try {
 Token t;
    ASTPrimaryExpression jjtn001 = new ASTPrimaryExpression(this, JJTPRIMARYEXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        PrimaryPrefix();
        label_31:
        while (true) {
          if (jj_2_24(2)) {
            ;
          } else {
            break label_31;
          }
          PrimarySuffix();
        }
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    setFirstLastToken(jjtn001, t, getToken(1));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("PrimaryExpression");
    }
  }

  final public void PrimaryPrefix() throws ParseException {
    trace_call("PrimaryPrefix");
    try {
 Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case NULL:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        Literal();
        break;
      case IDENTIFIER:
        Name();
        break;
      case THIS:
        jj_consume_token(THIS);
        break;
      case SUPER:
        jj_consume_token(SUPER);
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
        break;
      case LPAREN:
    ASTParensExpression jjtn001 = new ASTParensExpression(this, JJTPARENSEXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
        try {
    t = getToken(1);
          jj_consume_token(LPAREN);
          Expression();
          jj_consume_token(RPAREN);
                                             jjtree.closeNodeScope(jjtn001, true);
                                             jjtc001 = false;
                                            setFirstLastToken(jjtn001, t, getToken(0));
        } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
        } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
        }
        break;
      case NEW:
        AllocationExpression();
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("PrimaryPrefix");
    }
  }

  final public void PrimarySuffix() throws ParseException {
    trace_call("PrimarySuffix");
    try {
 Token t;
      if (jj_2_25(2)) {
        jj_consume_token(DOT);
        jj_consume_token(THIS);
      } else if (jj_2_26(2)) {
        jj_consume_token(DOT);
        jj_consume_token(CLASS);
      } else if (jj_2_27(2)) {
        jj_consume_token(DOT);
        AllocationExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
    ASTPrimarySuffix jjtn001 = new ASTPrimarySuffix(this, JJTPRIMARYSUFFIX);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
          try {
     t = getToken(1);
            jj_consume_token(LBRACKET);
            Expression();
            jj_consume_token(RBRACKET);
                                            jjtree.closeNodeScope(jjtn001, true);
                                            jjtc001 = false;
                                              setFirstLastToken(jjtn001, t, getToken(0));
          } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
          } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
          }
          break;
        case DOT:
    ASTPrimarySuffixIdentifier jjtn002 = new ASTPrimarySuffixIdentifier(this, JJTPRIMARYSUFFIXIDENTIFIER);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
          try {
    t = getToken(1);
            jj_consume_token(DOT);
            jj_consume_token(IDENTIFIER);
                                        jjtree.closeNodeScope(jjtn002, true);
                                        jjtc002 = false;
                                        setFirstLastToken(jjtn002, t, getToken(0));
          } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
          }
          break;
        case LPAREN:
          Arguments();
          break;
        default:
          jj_la1[77] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("PrimarySuffix");
    }
  }

  final public void Literal() throws ParseException {
    trace_call("Literal");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOATING_POINT_LITERAL:
        jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      case CHARACTER_LITERAL:
        jj_consume_token(CHARACTER_LITERAL);
        break;
      case STRING_LITERAL:
        jj_consume_token(STRING_LITERAL);
        break;
      case FALSE:
      case TRUE:
        BooleanLiteral();
        break;
      case NULL:
        NullLiteral();
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Literal");
    }
  }

  final public void BooleanLiteral() throws ParseException {
    trace_call("BooleanLiteral");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("BooleanLiteral");
    }
  }

  final public void NullLiteral() throws ParseException {
    trace_call("NullLiteral");
    try {
      jj_consume_token(NULL);
    } finally {
      trace_return("NullLiteral");
    }
  }

  final public void Arguments() throws ParseException {
    trace_call("Arguments");
    try {
 Token t;
    ASTArguments jjtn001 = new ASTArguments(this, JJTARGUMENTS);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          ArgumentList();
          break;
        default:
          jj_la1[80] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("Arguments");
    }
  }

  final public void ArgumentList() throws ParseException {
    trace_call("ArgumentList");
    try {
      Expression();
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[81] = jj_gen;
          break label_32;
        }
                   ASTComma jjtn001 = new ASTComma(this, JJTCOMMA);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(COMMA);
        } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
        }
        Expression();
      }
    } finally {
      trace_return("ArgumentList");
    }
  }

  final public void AllocationExpression() throws ParseException {
    trace_call("AllocationExpression");
    try {
      if (jj_2_28(2)) {
        jj_consume_token(NEW);
        PrimitiveType();
        ArrayDimensions();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ArrayInitializer();
          break;
        default:
          jj_la1[82] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
          Name();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ArrayDimensions();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
              ArrayInitializer();
              break;
            default:
              jj_la1[83] = jj_gen;
              ;
            }
            break;
          case LPAREN:
            Arguments();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
              ClassBody();
              break;
            default:
              jj_la1[84] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[85] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[86] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("AllocationExpression");
    }
  }

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  final public void ArrayDimensions() throws ParseException {
    trace_call("ArrayDimensions");
    try {
 Token t;
      label_33:
      while (true) {
                   ASTArrayLBracket jjtn001 = new ASTArrayLBracket(this, JJTARRAYLBRACKET);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
        try {
                    t = getToken(1);
          jj_consume_token(LBRACKET);
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
        setFirstLastToken(jjtn001, t, getToken(0));
        } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
        }
        Expression();
      ASTArrayRBracket jjtn002 = new ASTArrayRBracket(this, JJTARRAYRBRACKET);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
        try {
        t = getToken(1);
          jj_consume_token(RBRACKET);
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
        setFirstLastToken(jjtn002, t, getToken(0));
        } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
        }
        if (jj_2_29(2)) {
          ;
        } else {
          break label_33;
        }
      }
      label_34:
      while (true) {
        if (jj_2_30(2)) {
          ;
        } else {
          break label_34;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } finally {
      trace_return("ArrayDimensions");
    }
  }

/*
 * Statement syntax follows.
 */
  final public void Statement() throws ParseException {
    trace_call("Statement");
    try {
      if (jj_2_31(2)) {
        LabeledStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          Block();
          break;
        case SEMICOLON:
          EmptyStatement();
          break;
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          StatementExpression();
          jj_consume_token(SEMICOLON);
          break;
        case SWITCH:
          SwitchStatement();
          break;
        case IF:
          IfStatement();
          break;
        case WHILE:
          WhileStatement();
          break;
        case DO:
          DoStatement();
          break;
        case FOR:
          ForStatement();
          break;
        case BREAK:
          BreakStatement();
          break;
        case CONTINUE:
          ContinueStatement();
          break;
        case RETURN:
          ReturnStatement();
          break;
        case THROW:
          ThrowStatement();
          break;
        case SYNCHRONIZED:
          SynchronizedStatement();
          break;
        case TRY:
          TryStatement();
          break;
        default:
          jj_la1[87] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("Statement");
    }
  }

  final public void LabeledStatement() throws ParseException {
    trace_call("LabeledStatement");
    try {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      Statement();
    } finally {
      trace_return("LabeledStatement");
    }
  }

  final public void Block() throws ParseException {
    trace_call("Block");
    try {
 Token t;
    ASTBlock jjtn001 = new ASTBlock(this, JJTBLOCK);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        jj_consume_token(LBRACE);
        label_35:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BREAK:
          case BYTE:
          case CHAR:
          case CONTINUE:
          case DO:
          case DOUBLE:
          case FALSE:
          case FINAL:
          case FLOAT:
          case FOR:
          case IF:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case RETURN:
          case SHORT:
          case SUPER:
          case SWITCH:
          case SYNCHRONIZED:
          case THIS:
          case THROW:
          case TRUE:
          case TRY:
          case WHILE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case LBRACE:
          case SEMICOLON:
          case INCR:
          case DECR:
            ;
            break;
          default:
            jj_la1[88] = jj_gen;
            break label_35;
          }
          BlockStatement();
        }
        jj_consume_token(RBRACE);
     jjtree.closeNodeScope(jjtn001, true);
     jjtc001 = false;
    setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("Block");
    }
  }

  final public void BlockStatement() throws ParseException {
    trace_call("BlockStatement");
    try {
      if (jj_2_32(2147483647)) {
        LocalVariableDeclaration();
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
        case CONTINUE:
        case DO:
        case FALSE:
        case FOR:
        case IF:
        case NEW:
        case NULL:
        case RETURN:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
          Statement();
          break;
        default:
          jj_la1[89] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("BlockStatement");
    }
  }

  final public void LocalVariableDeclaration() throws ParseException {
    trace_call("LocalVariableDeclaration");
    try {
 Token t;
    ASTLocalVariableDeclaration jjtn001 = new ASTLocalVariableDeclaration(this, JJTLOCALVARIABLEDECLARATION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
          jj_consume_token(FINAL);
          break;
        default:
          jj_la1[90] = jj_gen;
          ;
        }
        Type();
        VariableDeclarator();
        label_36:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[91] = jj_gen;
            break label_36;
          }
          jj_consume_token(COMMA);
          VariableDeclarator();
        }
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    setFirstLastToken(jjtn001, t, getToken(1));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("LocalVariableDeclaration");
    }
  }

  final public void EmptyStatement() throws ParseException {
    trace_call("EmptyStatement");
    try {
      jj_consume_token(SEMICOLON);
    } finally {
      trace_return("EmptyStatement");
    }
  }

  final public void StatementExpression() throws ParseException {
    trace_call("StatementExpression");
    try {
  Token t;
   ASTStatementExpression jjtn001 = new ASTStatementExpression(this, JJTSTATEMENTEXPRESSION);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
      try {
     t = getToken(1);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          PreIncrementExpression();
          break;
        case DECR:
          PreDecrementExpression();
          break;
        default:
          jj_la1[92] = jj_gen;
          if (jj_2_33(2147483647)) {
            Assignment();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case FALSE:
            case NEW:
            case NULL:
            case SUPER:
            case THIS:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
              PostfixExpression();
              break;
            default:
              jj_la1[93] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    setFirstLastToken(jjtn001, t, getToken(1));
      } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte001;}
   }
   if (jjte001 instanceof ParseException) {
     {if (true) throw (ParseException)jjte001;}
   }
   {if (true) throw (Error)jjte001;}
      } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
      }
    } finally {
      trace_return("StatementExpression");
    }
  }

  final public void SwitchStatement() throws ParseException {
    trace_call("SwitchStatement");
    try {
 Token t;
    ASTSwitchStatement jjtn001 = new ASTSwitchStatement(this, JJTSWITCHSTATEMENT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        jj_consume_token(SWITCH);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        jj_consume_token(LBRACE);
        label_37:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CASE:
          case _DEFAULT:
            ;
            break;
          default:
            jj_la1[94] = jj_gen;
            break label_37;
          }
          SwitchLabel();
          label_38:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BOOLEAN:
            case BREAK:
            case BYTE:
            case CHAR:
            case CONTINUE:
            case DO:
            case DOUBLE:
            case FALSE:
            case FINAL:
            case FLOAT:
            case FOR:
            case IF:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case RETURN:
            case SHORT:
            case SUPER:
            case SWITCH:
            case SYNCHRONIZED:
            case THIS:
            case THROW:
            case TRUE:
            case TRY:
            case WHILE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
            case SEMICOLON:
            case INCR:
            case DECR:
              ;
              break;
            default:
              jj_la1[95] = jj_gen;
              break label_38;
            }
            BlockStatement();
          }
        }
        jj_consume_token(RBRACE);
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
    setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("SwitchStatement");
    }
  }

  final public void SwitchLabel() throws ParseException {
    trace_call("SwitchLabel");
    try {
 Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
    ASTCaseSwitchLabel jjtn001 = new ASTCaseSwitchLabel(this, JJTCASESWITCHLABEL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
        try {
    t = getToken(1);
          jj_consume_token(CASE);
          Expression();
          jj_consume_token(COLON);
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtc001 = false;
                            setFirstLastToken(jjtn001, t, getToken(0));
        } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
        } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
        }
        break;
      case _DEFAULT:
    ASTDefaultSwitchLabel jjtn002 = new ASTDefaultSwitchLabel(this, JJTDEFAULTSWITCHLABEL);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
        try {
      t = getToken(1);
          jj_consume_token(_DEFAULT);
          jj_consume_token(COLON);
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtc002 = false;
                      setFirstLastToken(jjtn002, t, getToken(1));
        } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
        }
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("SwitchLabel");
    }
  }

  final public void IfStatement() throws ParseException {
    trace_call("IfStatement");
    try {
    Token t;
    ASTIfStatement jjtn001 = new ASTIfStatement(this, JJTIFSTATEMENT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        jj_consume_token(IF);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Block();
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
        setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        label_39:
        while (true) {
          if (jj_2_34(2)) {
            ;
          } else {
            break label_39;
          }
     ASTElseIfStatement jjtn002 = new ASTElseIfStatement(this, JJTELSEIFSTATEMENT);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
          try {
    t = getToken(1);
            jj_consume_token(ELSE);
            jj_consume_token(IF);
            jj_consume_token(LPAREN);
            Expression();
            jj_consume_token(RPAREN);
            Block();
     jjtree.closeNodeScope(jjtn002, true);
     jjtc002 = false;
      setFirstLastToken(jjtn002, t, getToken(0));
          } catch (Throwable jjte002) {
     if (jjtc002) {
       jjtree.clearNodeScope(jjtn002);
       jjtc002 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte002 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte002;}
     }
     if (jjte002 instanceof ParseException) {
       {if (true) throw (ParseException)jjte002;}
     }
     {if (true) throw (Error)jjte002;}
          } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
          }
        }
     ASTElseStatement jjtn003 = new ASTElseStatement(this, JJTELSESTATEMENT);
     boolean jjtc003 = true;
     jjtree.openNodeScope(jjtn003);
        try {
   t = getToken(1);
          jj_consume_token(ELSE);
          Block();
     jjtree.closeNodeScope(jjtn003, true);
     jjtc003 = false;
    setFirstLastToken(jjtn003, t, getToken(0));
        } catch (Throwable jjte003) {
     if (jjtc003) {
       jjtree.clearNodeScope(jjtn003);
       jjtc003 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte003 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte003;}
     }
     if (jjte003 instanceof ParseException) {
       {if (true) throw (ParseException)jjte003;}
     }
     {if (true) throw (Error)jjte003;}
        } finally {
     if (jjtc003) {
       jjtree.closeNodeScope(jjtn003, true);
     }
        }
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
    } finally {
      trace_return("IfStatement");
    }
  }

  final public void WhileStatement() throws ParseException {
    trace_call("WhileStatement");
    try {
    Token t;
    ASTWhileStatement jjtn001 = new ASTWhileStatement(this, JJTWHILESTATEMENT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
      t = getToken(1);
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Block();
       jjtree.closeNodeScope(jjtn001, true);
       jjtc001 = false;
        setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("WhileStatement");
    }
  }

  final public void DoStatement() throws ParseException {
    trace_call("DoStatement");
    try {
    ASTDoStatement jjtn001 = new ASTDoStatement(this, JJTDOSTATEMENT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    Token t = getToken(1);
        jj_consume_token(DO);
        Block();
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtc001 = false;
    setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      WhileAfterDo();
    } finally {
      trace_return("DoStatement");
    }
  }

  final public void WhileAfterDo() throws ParseException {
    trace_call("WhileAfterDo");
    try {
 Token t;
  ASTWhileAfterDo jjtn001 = new ASTWhileAfterDo(this, JJTWHILEAFTERDO);
  boolean jjtc001 = true;
  jjtree.openNodeScope(jjtn001);
      try {
   t = getToken(1);
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
  jjtree.closeNodeScope(jjtn001, true);
  jjtc001 = false;
    setFirstLastToken(jjtn001, t, getToken(1));
      } catch (Throwable jjte001) {
  if (jjtc001) {
    jjtree.clearNodeScope(jjtn001);
    jjtc001 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte001 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte001;}
  }
  if (jjte001 instanceof ParseException) {
    {if (true) throw (ParseException)jjte001;}
  }
  {if (true) throw (Error)jjte001;}
      } finally {
  if (jjtc001) {
    jjtree.closeNodeScope(jjtn001, true);
  }
      }
      jj_consume_token(SEMICOLON);
    } finally {
      trace_return("WhileAfterDo");
    }
  }

  final public void ForStatement() throws ParseException {
    trace_call("ForStatement");
    try {
    Token t;
    ASTForStatement jjtn003 = new ASTForStatement(this, JJTFORSTATEMENT);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
    t = getToken(1);
        jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        ForInit();
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          Expression();
          break;
        default:
          jj_la1[98] = jj_gen;
          ;
        }
                                             ASTForSemicolon jjtn001 = new ASTForSemicolon(this, JJTFORSEMICOLON);
                                             boolean jjtc001 = true;
                                             jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(SEMICOLON);
        } finally {
                                             if (jjtc001) {
                                               jjtree.closeNodeScope(jjtn001, true);
                                             }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          ForUpdate();
          break;
        default:
          jj_la1[99] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
                  ASTForBlock jjtn002 = new ASTForBlock(this, JJTFORBLOCK);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
        try {
          Block();
        } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
        }
               jjtree.closeNodeScope(jjtn003, true);
               jjtc003 = false;
    setFirstLastToken(jjtn003, t, getToken(0));
      } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
    } finally {
      trace_return("ForStatement");
    }
  }

  final public void ForInit() throws ParseException {
    trace_call("ForInit");
    try {
      if (jj_2_35(2147483647)) {
        LocalVariableDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          StatementExpressionList();
          break;
        default:
          jj_la1[100] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("ForInit");
    }
  }

  final public void StatementExpressionList() throws ParseException {
    trace_call("StatementExpressionList");
    try {
      StatementExpression();
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[101] = jj_gen;
          break label_40;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
    } finally {
      trace_return("StatementExpressionList");
    }
  }

  final public void ForUpdate() throws ParseException {
    trace_call("ForUpdate");
    try {
      StatementExpressionList();
    } finally {
      trace_return("ForUpdate");
    }
  }

  final public void BreakStatement() throws ParseException {
    trace_call("BreakStatement");
    try {
  Token t;
    ASTBreakStatement jjtn001 = new ASTBreakStatement(this, JJTBREAKSTATEMENT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        jj_consume_token(BREAK);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        default:
          jj_la1[102] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
    setFirstLastToken(jjtn001, t, getToken(1));
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("BreakStatement");
    }
  }

  final public void ContinueStatement() throws ParseException {
    trace_call("ContinueStatement");
    try {
  Token t;
    ASTContinueStatement jjtn001 = new ASTContinueStatement(this, JJTCONTINUESTATEMENT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        jj_consume_token(CONTINUE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        default:
          jj_la1[103] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
     jjtree.closeNodeScope(jjtn001, true);
     jjtc001 = false;
    setFirstLastToken(jjtn001,t,getToken(0));
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("ContinueStatement");
    }
  }

  final public void ReturnStatement() throws ParseException {
    trace_call("ReturnStatement");
    try {
 Token t;
    ASTReturnStatement jjtn001 = new ASTReturnStatement(this, JJTRETURNSTATEMENT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
   t = getToken(1);
        jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          Expression();
          break;
        default:
          jj_la1[104] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } finally {
      trace_return("ReturnStatement");
    }
  }

  final public void ThrowStatement() throws ParseException {
    trace_call("ThrowStatement");
    try {
      jj_consume_token(THROW);
      Expression();
      jj_consume_token(SEMICOLON);
    } finally {
      trace_return("ThrowStatement");
    }
  }

  final public void SynchronizedStatement() throws ParseException {
    trace_call("SynchronizedStatement");
    try {
      jj_consume_token(SYNCHRONIZED);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Block();
    } finally {
      trace_return("SynchronizedStatement");
    }
  }

  final public void TryStatement() throws ParseException {
    trace_call("TryStatement");
    try {
    ASTTry jjtn003 = new ASTTry(this, JJTTRY);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
  Token t = getToken(1);
        jj_consume_token(TRY);
        Block();
    ASTCatch jjtn001 = new ASTCatch(this, JJTCATCH);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
        try {
    Token t1 = getToken(1);
          label_41:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CATCH:
              ;
              break;
            default:
              jj_la1[105] = jj_gen;
              break label_41;
            }
            jj_consume_token(CATCH);
            jj_consume_token(LPAREN);
            FormalParameter();
            jj_consume_token(RPAREN);
            Block();
          }
                                                      jjtree.closeNodeScope(jjtn001, true);
                                                      jjtc001 = false;
                                                      setFirstLastToken(jjtn001, t1, getToken(0));
        } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
        } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINALLY:
      ASTFinally jjtn002 = new ASTFinally(this, JJTFINALLY);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
          try {
      Token t2 = getToken(1);
            jj_consume_token(FINALLY);
            Block();
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                          setFirstLastToken(jjtn002, t2, getToken(0));
          } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
          } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
          }
          break;
        default:
          jj_la1[106] = jj_gen;
          ;
        }
        jjtree.closeNodeScope(jjtn003, true);
        jjtc003 = false;
        setFirstLastToken(jjtn003, t, getToken(0));
      } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
    } finally {
      trace_return("TryStatement");
    }
  }

/**
 * Decaf Grammar starts here - SK
 */
  final public void DecafClass() throws ParseException {
    trace_call("DecafClass");
    try {
      ASTDecafClass jjtn001 = new ASTDecafClass(this, JJTDECAFCLASS);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        DecafMain();
        label_42:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
          case VOID:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[107] = jj_gen;
            break label_42;
          }
          DecafMethod();
        }
        label_43:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
          case CLASS:
          case FINAL:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case STATIC:
            ;
            break;
          default:
            jj_la1[108] = jj_gen;
            break label_43;
          }
          NestedClassDeclaration();
        }
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    } finally {
      trace_return("DecafClass");
    }
  }

/*
 * Unencapsulated Decaf floating code or methods
 */
  final public void DecafMain() throws ParseException {
    trace_call("DecafMain");
    try {
 Token t;
      ASTDecafMain jjtn001 = new ASTDecafMain(this, JJTDECAFMAIN);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1);
        label_44:
        while (true) {
          BlockStatement();
          if (jj_2_36(3)) {
            ;
          } else {
            break label_44;
          }
        }
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
    setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    } finally {
      trace_return("DecafMain");
    }
  }

/*
* Method that comes after the "floating" code in a Decaf file.
* Prevents being confused for Block() and Decaf method calls not being substituted
*/
  final public void DecafMethod() throws ParseException {
    trace_call("DecafMethod");
    try {
 Token t;
      ASTDecafMethod jjtn001 = new ASTDecafMethod(this, JJTDECAFMETHOD);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
    t = getToken(1); //first word of method declaration - likely the return type
    t.specialToken.image = " "; //remove the newline from the first token
    /* If there's two newlines before the method, remove the special token to avoid
     too many line breaks */
    if (t.specialToken.specialToken != null) {
        t.specialToken.specialToken = null;
        }
        ResultType();
        MethodDeclarator();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case THROWS:
          jj_consume_token(THROWS);
          NameList();
          break;
        default:
          jj_la1[109] = jj_gen;
          ;
        }
        Block();
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
      setFirstLastToken(jjtn001, t, getToken(0));
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    } finally {
      trace_return("DecafMethod");
    }
  }

  void setFirstLastToken(SimpleNode jjtThis, Token t1, Token t2) throws ParseException {
    trace_call("setFirstLastToken");
    try {
    jjtThis.setFirstToken(t1);
    jjtThis.setLastToken(t2);
    } finally {
      trace_return("setFirstLastToken");
    }
  }

  void addErrorMessage(ParseException ex) throws ParseException {
    trace_call("addErrorMessage");
    try {
    String msg = ex.getMessage();
    if (!errors.contains(msg)) {
        errors.add(msg);
    }
    } finally {
      trace_return("addErrorMessage");
    }
  }

  void recoverFromError(int endKind) throws ParseException {
    trace_call("recoverFromError");
    try {
    Token t;
    do {
        t = getNextToken();
        /* Skip forward to the next occurrence of endKind */
    } while (t.kind != endKind && t.kind != EOF);
    } finally {
      trace_return("recoverFromError");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_230()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_139()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_156() {
    Token xsp;
    if (jj_3_29()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_57()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_156()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_228()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) return true;
    }
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_63()) return true;
    if (jj_3R_156()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_206() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_114()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_207()) return true;
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_209()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_210()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_3R_228()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_229()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_207()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_222()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    }
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_228()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_211() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_246()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_247()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_197() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_211()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_73()) return true;
    if (jj_3R_212()) return true;
    xsp = jj_scanpos;
    if (jj_3R_213()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    }
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_3R_250()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_161()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_137()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(67)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_215() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_198() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_215()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_68()) return true;
    if (jj_3R_116()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_216()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(67)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_9() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_53()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_3R_198()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_3R_197()) return true;
    return false;
  }

  private boolean jj_3_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_217()) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_139()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_253()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_231() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) return true;
    }
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_219()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_205() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_195() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_205()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_166()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_244()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_245()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_133()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_3R_231()) return true;
    return false;
  }

  private boolean jj_3R_223() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_73()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_239() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    }
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_49()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_240() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) return true;
    }
    }
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_198()) return true;
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_197()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_71()) return true;
    if (jj_3R_243()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_3R_217()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    }
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    }
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_192()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_240()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_226() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    }
    }
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_185()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_239()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_203() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    }
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_204()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_3R_182()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_232()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_181()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_242() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_178()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_226()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_171()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_71()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_160()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_203()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_111() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_131()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_136()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_193()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_115()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_186()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_248() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) return true;
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_183()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_3R_248()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_249()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_241()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_57()) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_61()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    if (jj_3R_45()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    if (jj_3R_116()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_117()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_57()) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_109()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_57()) return true;
    if (jj_3R_59()) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JDCParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[110];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x2010200,0x5b349c00,0x0,0x200,0x2000200,0x2000200,0x800000,0x80000000,0xa219600,0x2000200,0x2000200,0xa209400,0x2000200,0x2000200,0x200,0x200,0x2000200,0x2000200,0x800000,0xa219600,0xa209400,0x2000000,0x2000000,0x0,0x0,0x0,0x1000000,0x1000000,0x0,0x2000200,0x2000200,0x0,0x0,0x0,0x0,0xa209400,0x2000000,0x0,0x0,0x0,0x5b349c00,0x1000000,0x0,0x8209400,0x0,0x8209400,0x8209400,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x1000000,0x1000000,0x0,0x0,0x0,0x1000000,0x0,0x1000000,0x1000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x51140800,0x5b349c00,0x51140800,0x2000000,0x0,0x0,0x1000000,0x82000,0x5b349c00,0x82000,0x400000,0x1000000,0x1000000,0x1000000,0x0,0x0,0x0,0x1000000,0x4000,0x4000000,0x8209400,0x2010200,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x100,0x1,0x808,0x8ccfb0d4,0x0,0x808,0x800,0x800,0x0,0x0,0x3226e3c,0x4e00,0x4e00,0x2206e14,0x24e20,0x24e20,0x800,0x800,0x4e00,0x4e00,0x0,0x3226e3c,0x2206e14,0x2204e00,0x2204e00,0x0,0x0,0x0,0x884480c0,0x884480c0,0x0,0x24e20,0x24e20,0x100000,0x0,0x0,0x0,0x2014,0x0,0xe00,0xe00,0x100000,0x8ccfb0d4,0x884480c0,0x4000,0x2014,0x0,0x2014,0x1002014,0x0,0x884480c0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x884480c0,0x0,0x0,0x884480c0,0x884480c0,0x0,0x0,0x0,0x884480c0,0x0,0x88400080,0x400000,0x884480c0,0x0,0x0,0x0,0x0,0x0,0x40,0x8ccf90c0,0x8ccfb0d4,0x8ccf90c0,0x0,0x0,0x0,0x884480c0,0x0,0x8ccfb0d4,0x0,0x0,0x884480c0,0x884480c0,0x884480c0,0x0,0x0,0x0,0x884480c0,0x0,0x0,0x1002014,0x4e00,0x100000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x1000,0x3000114e,0x4000,0x1000,0x0,0x0,0x0,0x0,0x108,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x0,0x2000,0x8000,0x400,0xf00c014e,0xf00c014e,0x2000,0x0,0x0,0x0,0x1100,0x400,0x2000,0x8,0x0,0x0,0x0,0x0,0x3000114e,0x4e,0x0,0x8,0x400,0x0,0x8,0x2000,0xf00c004e,0x8000,0x100000,0x0,0x0,0x0,0x2400000,0x2400000,0x0,0x1830000,0x1830000,0x0,0x0,0xc0000000,0xc0000000,0x0,0x0,0xc0000000,0xf00c004e,0xc0000,0xc0000,0x4e,0xc004e,0x40,0x30000000,0x30000000,0x4e,0x4440,0x6,0x0,0xf00c004e,0x2000,0x100,0x100,0x100,0x440,0x0,0x3000114e,0x3000114e,0x3000114e,0x0,0x2000,0x30000000,0x4e,0x0,0x3000114e,0x0,0x0,0xf00c004e,0x3000004e,0x3000004e,0x2000,0x8,0x8,0xf00c004e,0x0,0x0,0x8,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffe00,0x0,0x8,0x10,0x4,0x0,0x0,0x0,0x0,0x0,0x1c0,0x1c0,0x0,0x0,0x23,0x23,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[36];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JDCParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JDCParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JDCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JDCParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JDCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JDCParser(JDCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JDCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 110; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[116];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 110; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 116; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 36; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
